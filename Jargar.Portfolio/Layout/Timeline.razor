<h3>Timeline</h3>
<MudGrid>
    <MudItem xs="12" sm="5">
        <MudSelect T="TimelineOrientation" ValueChanged="OnOrientationChange" Label="TimelineOrientation" Dense="true" Variant="Variant.Outlined">
            <MudSelectItem T="TimelineOrientation" Value="TimelineOrientation.Vertical">Vertical</MudSelectItem>
            <MudSelectItem T="TimelineOrientation" Value="TimelineOrientation.Horizontal">Horizontal</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudSelect T="TimelinePosition" @bind-Value="@_position" Label="TimelinePosition" Dense="true" Variant="Variant.Outlined">
            @if (_orientation == TimelineOrientation.Vertical)
            {
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.Start">Start</MudSelectItem>
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.Left">Left</MudSelectItem>
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.Alternate">Alternate</MudSelectItem>
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.Right">Right</MudSelectItem>
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.End">End</MudSelectItem>
            }
            else if (_orientation == TimelineOrientation.Horizontal)
            {
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.Top">Top</MudSelectItem>
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.Alternate">Alternate</MudSelectItem>
                <MudSelectItem T="TimelinePosition" Value="TimelinePosition.Bottom">Bottom</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="2">
        <MudSwitch Label="Reverse" @bind-Value="@_reverse" Disabled="IsSwitchDisabled()" Color="Color.Primary" />
    </MudItem>
</MudGrid>

<MudTimeline TimelineOrientation="_orientation" TimelinePosition="_position" Reverse="_reverse">


    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
   
        <ItemDot>
            <MudIcon Icon="@cube" />
        </ItemDot>
        <ItemContent>
            <MudCard>
                <MudCardContent>
                    <MudText>
                        Microsoft Certified: Azure Fundamentals, AZ-900, 2023 | Microsoft Certified: Foundational C#, 2023
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">View Cert</MudButton>
                </MudCardActions>
            </MudCard>
        </ItemContent>
        <ItemOpposite>
            <MudText Color="Color.Success">2023/05/02</MudText>
        </ItemOpposite>
    </MudTimelineItem>

    @foreach (var timeItem in timeLineItems)
    {
       


        <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
            <ItemContent>
                <MudCard>
                    <MudCardContent>
                        <MudText>Story of the day</MudText>
                        <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                    </MudCardActions>
                </MudCard>
            </ItemContent>
            <ItemOpposite>
                <MudText Color="Color.Success">@timeItem.Value</MudText>
            </ItemOpposite>
        </MudTimelineItem>
    }
</MudTimeline>



@* <MudTimelineItem Color="Color.Success" Variant="Variant.Filled">
    <ItemContent>
        <MudAlert Severity="Severity.Success">The reactor is running at optimum temperature</MudAlert>
    </ItemContent>
    <ItemOpposite>
        <MudText Color="Color.Success">13:37</MudText>
    </ItemOpposite>
</MudTimelineItem>
<MudTimelineItem Color="Color.Warning" Variant="Variant.Filled">
    <ItemContent>
        <MudAlert Severity="Severity.Warning">The reactor temperature exceeds the optimal range</MudAlert>
    </ItemContent>
    <ItemOpposite>
        <MudText Color="Color.Warning">14:08</MudText>
    </ItemOpposite>
</MudTimelineItem>
<MudTimelineItem Color="Color.Error" Variant="Variant.Filled">
    <ItemContent>
        <MudAlert Severity="Severity.Error">Meltdown is imminent</MudAlert>
    </ItemContent>
    <ItemOpposite>
        <MudText Color="Color.Error">15:00</MudText>
    </ItemOpposite>
</MudTimelineItem> *@

@code {
    private TimelinePosition _position { get; set; } = TimelinePosition.Start;
    private TimelineOrientation _orientation { get; set; } = TimelineOrientation.Vertical;
    private bool _reverse { get; set; }

    private Dictionary<string, string> timeLineItems = new()
    {
         {"Tests Texts","2023/05/02" },
         {"Tessst","2023/05/02" },
         {"Tes22st Textsss","2023/05/02" },
         {"Te33st","2023/05/02" }

    };

    const string cube = @"<svg style=""width:24px;height:24px"" viewBox=""0 0 24 24"">
    <path fill=""currentColor"" d=""M21,16.5C21,16.88 20.79,17.21 20.47,17.38L12.57,21.82C12.41,21.94 12.21,22 12,22C11.79,22 11.59,21.94 11.43,21.82L3.53,17.38C3.21,17.21 3,16.88 3,16.5V7.5C3,7.12 3.21,6.79 3.53,6.62L11.43,2.18C11.59,2.06 11.79,2 12,2C12.21,2 12.41,2.06 12.57,2.18L20.47,6.62C20.79,6.79 21,7.12 21,7.5V16.5M12,4.15L6.04,7.5L12,10.85L17.96,7.5L12,4.15M5,15.91L11,19.29V12.58L5,9.21V15.91M19,15.91V9.21L13,12.58V19.29L19,15.91Z"" />
</svg>";

    private void OnOrientationChange(TimelineOrientation value)
    {
        _orientation = value;
        switch (value)
        {
            case TimelineOrientation.Vertical:
                if (_position is TimelinePosition.Top or TimelinePosition.Bottom)
                {
                    _position = TimelinePosition.Start;
                }
                break;
            case TimelineOrientation.Horizontal:
                if (_position is TimelinePosition.Start or TimelinePosition.Left or TimelinePosition.Right or TimelinePosition.End)
                {
                    _position = TimelinePosition.Top;
                }
                break;
        }
    }

    bool IsSwitchDisabled()
    {
        if (_position == TimelinePosition.Alternate)
            return false;
        else
            _reverse = false;
        return true;
    }
}